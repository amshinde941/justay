{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../components/shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post Comments ', error.message);\n    alert('Your comment can not be posted\\nError : ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(LeadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const LeadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n_c = LeadersLoading;\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"LeadersLoading\");","map":{"version":3,"sources":["C:/Users/ACER/Desktop/sample-react/samplereact/src/Redux/ActionCreater.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","console","log","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","LeadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../components/shared/baseUrl';\r\n\r\nexport const addComment = ( comment ) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n})\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n    const newComment = {\r\n        dishId:dishId,\r\n        rating:rating,\r\n        author:author,\r\n        comment:comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n    return fetch(baseUrl + 'comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n              },\r\n               error => {\r\n               var errmess = new Error(error.message);\r\n               throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error => {console.log('Post Comments ', error.message);\r\n            alert('Your comment can not be posted\\nError : '+error.message)})\r\n}\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n    dispatch(dishesLoading(true));\r\n    \r\n    return fetch(baseUrl + 'dishes')\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n          },\r\n          error => {\r\n              var errmess = new Error(error.message);\r\n              throw errmess;\r\n          })\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type:ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload:errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload:dishes\r\n})\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n    })\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n\r\n}\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload:errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload:comments\r\n})\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading(true));\r\n    \r\n    return fetch(baseUrl + 'promotions')\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n          error => {\r\n          var errmess = new Error(error.message);\r\n          throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(promos => dispatch(addPromos(promos)))\r\n        .catch(error => dispatch(promosFailed(error.message)));\r\n\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type:ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload:errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload:promos\r\n})\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    dispatch(LeadersLoading(true));\r\n    \r\n    return fetch(baseUrl + 'leaders')\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n          error => {\r\n          var errmess = new Error(error.message);\r\n          throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(leaders => dispatch(addLeaders(leaders)))\r\n        .catch(error => dispatch(leadersFailed(error.message)));\r\n\r\n}\r\n\r\nexport const LeadersLoading = () => ({\r\n    type:ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload:errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload:leaders\r\n})"]},"metadata":{},"sourceType":"module"}